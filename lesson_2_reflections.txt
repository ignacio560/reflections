1.- What happens when you initialize a repository?
Why do you need to do it?

The metadata for the repository is created, but no commits are made yet.

2.- How is the staging area different from the working directory
and the repository? What value do you think it offers?

It's an intermediate step between the two, allowing you to make sure how
many files you want to commit before doing so.

3.- How can you use the staging area to make sure you have one commit per
logical change?

By using diff and making sure I only commit one file at a time, if it relates
to only one logical change. It could be two files it they're completely related.

4.- What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

When I want to try new features but don't alter the main code and risk breaking
it. 




Materia:
git init: initializes a new repository.
git status: it shows which files have changed since the last commit.
git add: adds files to the staging area.
git commit
git commit -m "Commit message"
git diff with no arguments shows changes made from the WD to the staging area.
git diff --staged: shows changes from staging area to last commit in repository.

git reset --hard: discards any changes in the WD or SA: but be very careful,
this is non-restorable.

git branch: shows the current branches
git branch name: creates a new branch with that name.

To switch branches, use git checkout name

Working directory, staging area, repository.

Master is the name given to the main branch in most git repositories.
The current last commit on a branch is the TIP of the branch.
Merging is when you join two branch.
