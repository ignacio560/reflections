1.- What happens when you initialize a repository?
Why do you need to do it?

The metadata for the repository is created, but no commits are made yet.

2.- How is the staging area different from the working directory
and the repository? What value do you think it offers?

It's an intermediate step between the two, allowing you to make sure how
many files you want to commit before doing so.

3.- How can you use the staging area to make sure you have one commit per
logical change?

By using diff and making sure I only commit one file at a time, if it relates
to only one logical change. It could be two files it they're completely related.

4.- What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

When I want to try new features but don't alter the main code and risk breaking
it.

5.- How do the diagrams help you visualize the branch structure?

As projects become larger, with experimental features, and collaborations
with other people start to occur, diagrams helps visualizing where branches
are, and if there's any commit that's unreachable.

6.- What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

Merging two branches together creates a new commit in one of those branches
(usually the master branch) that now has all the commits from both branches.
We represent it like that because that's what it actually looks like.

7.- What are the pros and cons of Git’s automatic merging vs. always
doing merges manually?

Pros for automatic: it saves time and it works some times.
Cons for automatic: it doesn't always work and makes you check for things that
might be trivial
Pros for manual: it's perfect.
Cons for manual: it's time consuming.




_____________________

Summary:
git init: initializes a new repository.
git status: it shows which files have changed since the last commit.
git add: adds files to the staging area.
git commit
git commit -m "Commit message"
git diff with no arguments shows changes made from the WD to the staging area.
git diff --staged: shows changes from staging area to last commit in repository.

git reset --hard: discards any changes in the WD or SA: but be very careful,
this is non-restorable.

git branch: shows the current branches
git branch name: creates a new branch with that name.

To switch branches, use git checkout name

Working directory, staging area, repository.

Master is the name given to the main branch in most git repositories.
The current last commit on a branch is the TIP of the branch.
Merging is when you join two branch.

A remote branch means that we didn't create it. Once we check it out, it
behaves just like ours.

git log --graph --oneline branch1 branch2: it shows linearly the relation
between the branches.

Reachability: the concept is complex but we understand it. The thing is,
the command git checkout -b new_branch_name is the same as doing two commands
simultaneously: git branch new_branch_name and git checkout new_branch_name.
It's useful to create commits while going back or just to create new branches.

git merge master name: it merges the master with the name branch.

Now when we run git log, the commits are interleaved, and now using git diff
might give very huge differences between non-parent-related commits.
In order to find out what are the parents of each commits, we use a new command:

git show COMMIT-ID-IM-INTERESTED-IN-SEEING: it will show me the differences
between the ID I entered and it's parent, without actually knowing what the
parent's ID was.

To delete the branch that's no longer in use, we use:
git branch -d name: where name is the name of the branch we want to delete.
This won't delete the commits in the branch, it'll only delete the label.
This would've made those commits hard to find, but now they're reachable from
the master branch.

git log -n1 : shows only the last commit's log.

====
A note about git merge:
git merge will also include the currently checked-out branch in the merged
version. So if you have branch1 checked out, and you run
git merge branch2 branch3, the merged version will combine branch1 as well
as branch2 and branch3. That’s because the branch1 label will update after
you make the merge commit, so it’s unlikely that you didn’t want the changes
from branch1 included in the merge. For this reason, you should always checkout
one of the two branches you’re planning on merging before doing the merge.
Which one you should check out depends on which branch label you want to
point to the new commit.

Since the checked-out branch is always included in the merge, you may have
guessed that when you are merging two branches, you don't need to specify
both of them as arguments to git merge on the command line. If you want
to merge branch2 into branch1, you can simply git checkout branch1 and
then type git merge branch2. The only reason to type
git merge branch1 branch2 is if it helps you keep better mental track
of which branches you are merging.

Also, since the two branches are merged, the order in which they are
typed into the command line does not matter. The key is to remember
that git merge always merges all the specified branches into the
currently checked out branch, creating a new commit for that branch.
====
